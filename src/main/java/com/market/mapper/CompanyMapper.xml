<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.market.dao.CompanyMapper">

  <resultMap id="BaseResultMap" type="com.market.domain.Company">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="status" jdbcType="SMALLINT" property="status" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="create_by" jdbcType="VARCHAR" property="createBy" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="update_by" jdbcType="VARCHAR" property="updateBy" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="fund" jdbcType="DOUBLE" property="fund" />
    <result column="freezed_fund" jdbcType="DOUBLE" property="freezedFund" />
  </resultMap>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from company
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  
  <insert id="insert" parameterType="com.market.domain.Company">
    insert into company (id, name, status, 
      create_time, create_by, update_time, 
      update_by, password, fund, 
      freezed_fund)
    values (#{id,jdbcType=VARCHAR}::uuid, #{name,jdbcType=VARCHAR}, #{status,jdbcType=SMALLINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{updateBy,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{fund,jdbcType=DOUBLE}, 
      #{freezedFund,jdbcType=DOUBLE})
  </insert>
  
  <update id="updateByPrimaryKey" parameterType="com.market.domain.Company">
    update company
    set name = #{name,jdbcType=VARCHAR},
      status = #{status,jdbcType=SMALLINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_by = #{createBy,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      fund = #{fund,jdbcType=DOUBLE},
      freezed_fund = #{freezedFund,jdbcType=DOUBLE}
    where id = #{id,jdbcType=VARCHAR}::uuid
  </update>
  
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select id, name, status, create_time, create_by, update_time, update_by, password, 
    fund, freezed_fund
    from company
    where id = #{id,jdbcType=VARCHAR}::uuid
  </select>
  
  <select id="selectAll" resultMap="BaseResultMap">
    select id, name, status, create_time, create_by, update_time, update_by, password, 
    fund, freezed_fund
    from company
  </select>
  
  <select id="selectCompany" resultMap="BaseResultMap">
  	select * from company
  	where name = #{name,jdbcType=VARCHAR} and password = #{password,jdbcType=VARCHAR}
  </select>
  
  <select id="selectMany" resultMap="BaseResultMap">
  	select *
  	from company 
  	<if test="keyword != null or keyword != ''">
  		where name like CONCAT('%',#{keyword},'%') 
  	</if>
  	<choose>
	  	<when test="orderby != null and orderby != ''">
	  		order by #{orderby} 
	  	</when>
	  	<otherwise>
	  		order by create_time desc 
	  	</otherwise>
  	</choose>
  	limit #{pageSize} offset (#{pageIndex}-1)*#{pageSize} 
  </select>
  
  <select id="selectManyCount" resultType="java.lang.Integer">
    select count(*) 
    from company
    <if test="keyword != null or keyword != ''">
  		where name like CONCAT('%',#{keyword},'%') 
  	</if>
  </select>
  
</mapper>